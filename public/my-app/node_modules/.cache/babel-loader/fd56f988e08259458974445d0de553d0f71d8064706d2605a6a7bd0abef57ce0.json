{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adity\\\\Desktop\\\\Project\\\\my-app\\\\src\\\\components\\\\Camerageter.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PlantDiseaseDetection = () => {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [result, setResult] = useState('');\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true\n    }).then(stream => {\n      videoRef.current.srcObject = stream;\n    }).catch(err => {\n      console.error(\"Error accessing the camera: \", err);\n      alert(\"Could not access the camera. Please allow camera permissions.\");\n    });\n  }, []);\n  const captureImage = () => {\n    const context = canvasRef.current.getContext('2d');\n    context.drawImage(videoRef.current, 0, 0, 320, 240);\n  };\n  const uploadImage = () => {\n    setLoading(true);\n    const dataUrl = canvasRef.current.toDataURL('image/jpeg');\n    fetch(dataUrl).then(res => res.blob()).then(blob => {\n      const formData = new FormData();\n      formData.append('file', blob, 'plant_image.jpg');\n      fetch('http://10.12.37.12:8000/predict/', {\n        method: 'POST',\n        body: formData\n      }).then(response => response.json()).then(data => {\n        setLoading(false);\n        setResult(`Prediction: ${JSON.stringify(data.prediction, null, 2)}`);\n      }).catch(error => {\n        setLoading(false);\n        console.error(\"Error uploading the image or in prediction: \", error);\n        setResult(\"An error occurred during image upload or prediction.\");\n      });\n    }).catch(error => {\n      setLoading(false);\n      console.error(\"Error converting canvas to Blob: \", error);\n      setResult(\"An error occurred during image processing.\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '100px',\n        marginLeft: '300px',\n        borderRadius: \"8px\",\n        paddingTop: \"20px\",\n        width: \"800px\",\n        backgroundColor: \"#E4F1E8\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Plant Disease Detection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        width: \"320\",\n        height: \"240\",\n        autoPlay: true,\n        style: {\n          border: '1px solid #ddd',\n          marginTop: '20px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: \"320\",\n        height: \"240\",\n        style: {\n          border: '1px solid #ddd',\n          margin: '10px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 124\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: captureImage,\n        style: {\n          padding: '10px 20px',\n          margin: '10px',\n          fontSize: '16px',\n          cursor: 'pointer',\n          border: \"none\",\n          backgroundColor: \"#C6F5B5\",\n          borderRadius: \"8px\"\n        },\n        children: \"Capture Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: uploadImage,\n        style: {\n          padding: '10px 20px',\n          margin: '10px',\n          fontSize: '16px',\n          cursor: 'pointer',\n          border: \"none\",\n          backgroundColor: \"#C6F5B5\",\n          borderRadius: \"8px\"\n        },\n        children: \"Upload and Detect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"loading\",\n        style: {\n          marginTop: '20px'\n        },\n        children: \"Processing...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      style: {\n        backgroundColor: \"#E4F1E8\",\n        borderRadius: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"result\",\n        style: {\n          marginTop: '20px',\n          fontWeight: 'bold'\n        },\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 92\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(PlantDiseaseDetection, \"FIbSNzvP+MY3/3TrvLgY2yKRSSw=\");\n_c = PlantDiseaseDetection;\nexport default PlantDiseaseDetection;\nvar _c;\n$RefreshReg$(_c, \"PlantDiseaseDetection\");","map":{"version":3,"names":["React","useRef","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","PlantDiseaseDetection","_s","videoRef","canvasRef","result","setResult","loading","setLoading","navigator","mediaDevices","getUserMedia","video","then","stream","current","srcObject","catch","err","console","error","alert","captureImage","context","getContext","drawImage","uploadImage","dataUrl","toDataURL","fetch","res","blob","formData","FormData","append","method","body","response","json","data","JSON","stringify","prediction","children","style","textAlign","marginTop","marginLeft","borderRadius","paddingTop","width","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","ref","height","autoPlay","border","margin","onClick","padding","fontSize","cursor","id","className","fontWeight","_c","$RefreshReg$"],"sources":["C:/Users/adity/Desktop/Project/my-app/src/components/Camerageter.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\n\r\nconst PlantDiseaseDetection = () => {\r\n    const videoRef = useRef(null);\r\n    const canvasRef = useRef(null);\r\n    const [result, setResult] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        navigator.mediaDevices.getUserMedia({ video: true })\r\n            .then((stream) => {\r\n                videoRef.current.srcObject = stream;\r\n            })\r\n            .catch((err) => {\r\n                console.error(\"Error accessing the camera: \", err);\r\n                alert(\"Could not access the camera. Please allow camera permissions.\");\r\n            });\r\n    }, []);\r\n\r\n    const captureImage = () => {\r\n        const context = canvasRef.current.getContext('2d');\r\n        context.drawImage(videoRef.current, 0, 0, 320, 240);\r\n    };\r\n\r\n    const uploadImage = () => {\r\n        setLoading(true);\r\n        const dataUrl = canvasRef.current.toDataURL('image/jpeg');\r\n\r\n        fetch(dataUrl)\r\n            .then(res => res.blob())\r\n            .then(blob => {\r\n                const formData = new FormData();\r\n                formData.append('file', blob, 'plant_image.jpg');\r\n\r\n                fetch('http://10.12.37.12:8000/predict/', {\r\n                    method: 'POST',\r\n                    body: formData\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    setLoading(false);\r\n                    setResult(`Prediction: ${JSON.stringify(data.prediction, null, 2)}`);\r\n                })\r\n                .catch(error => {\r\n                    setLoading(false);\r\n                    console.error(\"Error uploading the image or in prediction: \", error);\r\n                    setResult(\"An error occurred during image upload or prediction.\");\r\n                });\r\n            })\r\n            .catch(error => {\r\n                setLoading(false);\r\n                console.error(\"Error converting canvas to Blob: \", error);\r\n                setResult(\"An error occurred during image processing.\");\r\n            });\r\n    };\r\n    return (\r\n        <>\r\n        <div style={{ textAlign: 'center', marginTop: '100px',marginLeft: '300px',borderRadius:\"8px\" ,paddingTop:\"20px\",width:\"800px\",backgroundColor:\"#E4F1E8\"}}>\r\n            <h1>Plant Disease Detection</h1>\r\n            <video ref={videoRef} width=\"320\" height=\"240\" autoPlay style={{ border: '1px solid #ddd', marginTop: '20px' }}></video>\r\n            <canvas ref={canvasRef} width=\"320\" height=\"240\" style={{ border: '1px solid #ddd', margin: '10px' }}></canvas><br />\r\n            <button onClick={captureImage} style={{ padding: '10px 20px', margin: '10px', fontSize: '16px', cursor: 'pointer', border:\"none\",backgroundColor:\"#C6F5B5\",borderRadius:\"8px\"}}>Capture Image</button>\r\n            <button onClick={uploadImage} style={{ padding: '10px 20px', margin: '10px', fontSize: '16px', cursor: 'pointer',border:\"none\",backgroundColor:\"#C6F5B5\",borderRadius:\"8px\"}}>Upload and Detect</button>\r\n            {loading && <div id=\"loading\" style={{ marginTop: '20px' }}>Processing...</div>}\r\n        </div>\r\n        <div className=\"container\" style={{backgroundColor:\"#E4F1E8\",borderRadius:\"20px\"}}><div id=\"result\" style={{ marginTop: '20px', fontWeight: 'bold' }}>{result}</div></div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PlantDiseaseDetection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}