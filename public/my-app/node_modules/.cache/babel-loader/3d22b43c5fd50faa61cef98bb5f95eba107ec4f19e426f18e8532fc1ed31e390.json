{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adity\\\\voting_app\\\\public\\\\my-app\\\\src\\\\components\\\\Livecamera.js\";\n// import React, { useRef, useEffect } from \"react\";\n// // import * as cocoSsd from \"@tensorflow-models/coco-ssd\";\n// // import \"@tensorflow/tfjs\";\n\n// const Livecamera = () => {\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n\n//   useEffect(() => {\n//     const loadModelAndDetect = async () => {\n//       // Load COCO-SSD model\n//       const model = await cocoSsd.load();\n\n//       // Start video stream\n//       const stream = await navigator.mediaDevices.getUserMedia({\n//         video: true,\n//       });\n//       videoRef.current.srcObject = stream;\n\n//       videoRef.current.onloadeddata = () => {\n//         detectObjects(model);\n//       };\n//     };\n\n//     loadModelAndDetect();\n//   }, []);\n\n//   const detectObjects = async (model) => {\n//     const canvas = canvasRef.current;\n//     const ctx = canvas.getContext(\"2d\");\n\n//     canvas.width = videoRef.current.videoWidth;\n//     canvas.height = videoRef.current.videoHeight;\n\n//     const detectFrame = async () => {\n//       const predictions = await model.detect(videoRef.current);\n//       renderPredictions(predictions, ctx);\n//       requestAnimationFrame(detectFrame);\n//     };\n\n//     detectFrame();\n//   };\n\n//   const renderPredictions = (predictions, ctx) => {\n//     ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n//     predictions.forEach((prediction) => {\n//       // Get the bounding box and text details\n//       const [x, y, width, height] = prediction.bbox;\n//       const text = prediction.class;\n\n//       // Draw bounding box\n//       ctx.strokeStyle = \"#00FF00\";\n//       ctx.lineWidth = 2;\n//       ctx.strokeRect(x, y, width, height);\n\n//       // Draw label\n//       ctx.fillStyle = \"#00FF00\";\n//       ctx.font = \"18px Arial\";\n//       ctx.fillText(text, x, y > 10 ? y - 5 : 10);\n//     });\n//   };\n\n//   return (\n//     <div style={{ position: \"relative\" }}>\n//       <video\n//         ref={videoRef}\n//         autoPlay\n//         playsInline\n//         style={{\n//           position: \"absolute\",\n//           top: 0,\n//           left: 0,\n//           width: \"100%\",\n//           height: \"100%\",\n//           zIndex: 1,\n//         }}\n//       />\n//       <canvas\n//         ref={canvasRef}\n//         style={{\n//           position: \"absolute\",\n//           top: 0,\n//           left: 0,\n//           width: \"100%\",\n//           height: \"100%\",\n//           zIndex: 2,\n//         }}\n//       />\n//     </div>\n//   );\n// };\n\n// export default Livecamera;\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Livecamera() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Livecamera\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_c = Livecamera;\nvar _c;\n$RefreshReg$(_c, \"Livecamera\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Livecamera","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/adity/voting_app/public/my-app/src/components/Livecamera.js"],"sourcesContent":["// import React, { useRef, useEffect } from \"react\";\r\n// // import * as cocoSsd from \"@tensorflow-models/coco-ssd\";\r\n// // import \"@tensorflow/tfjs\";\r\n\r\n// const Livecamera = () => {\r\n//   const videoRef = useRef(null);\r\n//   const canvasRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const loadModelAndDetect = async () => {\r\n//       // Load COCO-SSD model\r\n//       const model = await cocoSsd.load();\r\n\r\n//       // Start video stream\r\n//       const stream = await navigator.mediaDevices.getUserMedia({\r\n//         video: true,\r\n//       });\r\n//       videoRef.current.srcObject = stream;\r\n\r\n//       videoRef.current.onloadeddata = () => {\r\n//         detectObjects(model);\r\n//       };\r\n//     };\r\n\r\n//     loadModelAndDetect();\r\n//   }, []);\r\n\r\n//   const detectObjects = async (model) => {\r\n//     const canvas = canvasRef.current;\r\n//     const ctx = canvas.getContext(\"2d\");\r\n\r\n//     canvas.width = videoRef.current.videoWidth;\r\n//     canvas.height = videoRef.current.videoHeight;\r\n\r\n//     const detectFrame = async () => {\r\n//       const predictions = await model.detect(videoRef.current);\r\n//       renderPredictions(predictions, ctx);\r\n//       requestAnimationFrame(detectFrame);\r\n//     };\r\n    \r\n//     detectFrame();\r\n//   };\r\n\r\n//   const renderPredictions = (predictions, ctx) => {\r\n//     ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n//     predictions.forEach((prediction) => {\r\n//       // Get the bounding box and text details\r\n//       const [x, y, width, height] = prediction.bbox;\r\n//       const text = prediction.class;\r\n\r\n//       // Draw bounding box\r\n//       ctx.strokeStyle = \"#00FF00\";\r\n//       ctx.lineWidth = 2;\r\n//       ctx.strokeRect(x, y, width, height);\r\n\r\n//       // Draw label\r\n//       ctx.fillStyle = \"#00FF00\";\r\n//       ctx.font = \"18px Arial\";\r\n//       ctx.fillText(text, x, y > 10 ? y - 5 : 10);\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ position: \"relative\" }}>\r\n//       <video\r\n//         ref={videoRef}\r\n//         autoPlay\r\n//         playsInline\r\n//         style={{\r\n//           position: \"absolute\",\r\n//           top: 0,\r\n//           left: 0,\r\n//           width: \"100%\",\r\n//           height: \"100%\",\r\n//           zIndex: 1,\r\n//         }}\r\n//       />\r\n//       <canvas\r\n//         ref={canvasRef}\r\n//         style={{\r\n//           position: \"absolute\",\r\n//           top: 0,\r\n//           left: 0,\r\n//           width: \"100%\",\r\n//           height: \"100%\",\r\n//           zIndex: 2,\r\n//         }}\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Livecamera;\r\nimport React from 'react'\r\n\r\nexport default function Livecamera() {\r\n  return (\r\n    <div>Livecamera</div>\r\n  )\r\n}\r\n"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,eAAe,SAASC,UAAUA,CAAA,EAAG;EACnC,oBACED,OAAA;IAAAE,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAEzB;AAACC,EAAA,GAJuBN,UAAU;AAAA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}