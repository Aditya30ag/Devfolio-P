{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adity\\\\voting_app\\\\public\\\\my-app\\\\src\\\\components\\\\Otp.js\",\n  _s = $RefreshSig$();\n// import React, { useState ,useRef,useEffect} from 'react';\n// import { useNavigate } from \"react-router-dom\";\n// import { TextField, Button, Box, Typography, Grid, Paper } from '@mui/material';\n// import './OtpPage.css';\n// import axios from 'axios';\n\n// const Otp = () => {\n//   const [otp, setOtp] = useState(new Array(6).fill(\"\"));\n//   const [error, setError] = useState(false);\n//   const [success, setSuccess] = useState(''); // State for success messages\n//   const navigate = useNavigate();\n//   const handleChange = (element, index) => {\n//     if (isNaN(element.value)) return; // Allow only numbers\n//     setOtp([...otp.map((d, idx) => (idx === index ? element.value : d))]);\n\n//     // Move to the next input field automatically\n//     if (element.nextSibling && element.value) {\n//       element.nextSibling.focus();\n//     }\n//   };\n\n//   const handleSubmit1 = async(e) => {\n//     e.preventDefault();\n//     const otpValue = otp.join(\"\");\n//     if (otpValue.length === 6) {\n//       setError(false);\n//       console.log(\"Entered OTP:\", otpValue);\n//       // Here you can add the API call to verify the OTP\n//       try {\n//         const response = await axios.post('https://api.example.com/verify-otp', {\n//           otpValue, // Send the OTP in the request body\n//         });\n\n//         // Assuming a successful response\n//         if (response.data.success) {\n//           setSuccess('OTP verified successfully!');\n//           startRecording();\n//           navigate(\"/home\");\n//           setError(''); // Clear any previous errors\n//         } else {\n//           setError('Invalid OTP. Please try again.');\n//           setSuccess('');\n//         }\n//       } catch (error) {\n//         stopCapture();\n//         stopRecording();\n//         console.error('Error verifying OTP:', error);\n//         setError('An error occurred while verifying OTP. Please try again.');\n//         setSuccess('');\n//       }\n//     } else {\n//       setError(true);\n//     }\n//   };\n\n//   const [isRecording, setIsRecording] = useState(false);\n//   const [videoURL, setVideoURL] = useState(null);\n//   const mediaRecorderRef = useRef(null);\n//   const recordedChunks = useRef([]);\n\n//   const startRecording = async () => {\n//     try {\n//       // Capture the screen\n//       const stream = await navigator.mediaDevices.getDisplayMedia({\n//         video: { mediaSource: 'screen' },\n//       });\n\n//       // Initialize MediaRecorder\n//       mediaRecorderRef.current = new MediaRecorder(stream, {\n//         mimeType: 'video/webm',\n//       });\n\n//       // Collect the recorded chunks of data\n//       mediaRecorderRef.current.ondataavailable = (event) => {\n//         if (event.data.size > 0) {\n//           recordedChunks.current.push(event.data);\n//         }\n//       };\n\n//       // Handle the stop event\n//       mediaRecorderRef.current.onstop = () => {\n//         // Create a video URL from the recorded chunks\n//         const blob = new Blob(recordedChunks.current, { type: 'video/webm' });\n//         const videoURL = URL.createObjectURL(blob);\n//         setVideoURL(videoURL);\n//         recordedChunks.current = []; // Clear the recorded chunks\n//       };\n\n//       // Start the recording\n//       mediaRecorderRef.current.start();\n//       setIsRecording(true);\n//     } catch (err) {\n//       console.error('Error accessing display media', err);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     // Stop the recording\n//     mediaRecorderRef.current.stop();\n//     mediaRecorderRef.current = null; \n//     setIsRecording(false);\n//   };\n\n//   const containerRef = useRef(null);\n//   //fullscreen code\n//   useEffect(() => {\n//     // Request full-screen mode when the component mounts\n//     if (containerRef.current) {\n//       containerRef.current.requestFullscreen();\n//     }\n\n//     // Disable right-click context menu\n//     const handleContextMenu = (e) => {\n//       e.preventDefault();\n//     };\n\n//     // Disable certain key combinations\n//     const handleKeyDown = (e) => {\n//       // Disable F11, Ctrl+T, Ctrl+N, Ctrl+W, and Alt+F4\n//       if (\n//         e.key === 'F11' ||\n//         (e.ctrlKey && (e.key === 't' || e.key === 'n' || e.key === 'w')) ||\n//         (e.altKey && e.key === 'F4')\n//       ) {\n//         e.preventDefault();\n//       }\n//     };\n\n//     window.addEventListener('contextmenu', handleContextMenu);\n//     window.addEventListener('keydown', handleKeyDown);\n\n//     return () => {\n//       // Clean up the event listeners when the component unmounts\n//       window.removeEventListener('contextmenu', handleContextMenu);\n//       window.removeEventListener('keydown', handleKeyDown);\n//     };\n//   }, []);\n\n//   //cameralive\n//   const videoRef = useRef(null);\n//   const streamRef = useRef(null);\n//   useEffect(() => {\n//     navigator.mediaDevices.getUserMedia({ video: true })\n//       .then((stream) => {\n//         videoRef.current.srcObject = stream;\n//       })\n//       .catch((err) => {\n//         console.error(\"Error accessing the camera: \", err);\n//         alert(\"Could not access the camera. Please allow camera permissions.\");\n//       });\n//   }, []);\n\n//   const stopCapture = () => {\n//     if (streamRef.current) {\n//       // Stop all tracks in the media stream\n//       streamRef.current.getTracks().forEach((track) => track.stop());\n//       videoRef.current.srcObject = null; // Clear the video element's source\n//       streamRef.current = null; // Clear the stream reference\n//     }\n//   };\n\n//   return (\n//     <>\n\n//     <Grid container justifyContent=\"center\" alignItems=\"center\" style={{ minHeight: \"100vh\" }}>\n//         <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center', gap: '10px' ,marginRight:\"40px\"}}>\n//             <video ref={videoRef} width=\"320\" height=\"240\" autoPlay style={{ border: \"2px solid blue\" }}></video>\n//         </div>\n//       <Paper elevation={3} className=\"otp-paper\">\n//         <Typography variant=\"h4\" align=\"center\" gutterBottom>\n//           Enter OTP\n//         </Typography>\n//         <Typography variant=\"body1\" align=\"center\" color=\"textSecondary\">\n//           Please enter the 6-digit code sent to your mobile number\n//         </Typography>\n//         <form onSubmit={handleSubmit1} style={{ marginTop: \"20px\" }}>\n//           <Box display=\"flex\" justifyContent=\"center\" mb={2}>\n//             {otp.map((data, index) => (\n//               <TextField\n//                 key={index}\n//                 type=\"text\"\n//                 inputProps={{ maxLength: 1, style: { textAlign: 'center', fontSize: '24px' } }}\n//                 value={data}\n//                 onChange={(e) => handleChange(e.target, index)}\n//                 onFocus={(e) => e.target.select()}\n//                 className=\"otp-input\"\n//               />\n//             ))}\n//           </Box>\n//           {error && <Typography color=\"error\" align=\"center\">Please enter all 6 digits</Typography>}\n//           <Box textAlign=\"center\">\n//             <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"submit-btn\">\n//               Verify OTP\n//             </Button>\n//           </Box>\n//         </form>\n//       </Paper>\n//     </Grid>\n//     </>\n//   );\n// };\n\n// export default Otp;\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Otp = () => {\n  _s();\n  const [otp, setOtp] = useState(new Array(6).fill(\"\"));\n  const [error, setError] = useState(false);\n  const [success, setSuccess] = useState(''); // State for success messages\n  const navigate = useNavigate();\n  const handleChange = (element, index) => {\n    if (isNaN(element.value)) return; // Allow only numbers\n    setOtp([...otp.map((d, idx) => idx === index ? element.value : d)]);\n\n    // Move to the next input field automatically\n    if (element.nextSibling && element.value) {\n      element.nextSibling.focus();\n    }\n  };\n  const handleSubmit1 = async e => {\n    e.preventDefault();\n    const otpValue = otp.join(\"\");\n    if (otpValue.length === 6) {\n      setError(false);\n      console.log(\"Entered OTP:\", otpValue);\n      try {\n        const response = await axios.post('https://api.example.com/verify-otp', {\n          otpValue // Send the OTP in the request body\n        });\n        if (response.data.success) {\n          setSuccess('OTP verified successfully!');\n          alert(success);\n          navigate(\"/camera\");\n          setError(''); // Clear any previous errors\n        } else {\n          setError('Invalid OTP. Please try again.');\n          setSuccess('');\n        }\n      } catch (error) {\n        localStorage.removeItem('token');\n        window.location.reload();\n        navigate('/signup');\n        alert('An error occurred while verifying OTP. Please try with different credentials.');\n        console.error('Error verifying OTP:', error);\n        setError('An error occurred while verifying OTP. Please try again.');\n        setSuccess('');\n      }\n    } else {\n      setError(true);\n    }\n  };\n  const videoRef = useRef(null);\n  useEffect(() => {\n    if (localStorage.getItem(\"token\")) {\n      navigator.mediaDevices.getUserMedia({\n        video: true\n      }).then(stream => {\n        videoRef.current.srcObject = stream;\n      }).catch(err => {\n        console.error(\"Error accessing the camera: \", err);\n        alert(\"Could not access the camera. Please allow camera permissions.\");\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex items-center justify-center h-full py-20\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap justify-center gap-2 md:gap-4 lg:gap-6 mr-12\",\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        className: \"w-80 h-60 border-2 border-green-500\",\n        autoPlay: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white shadow-md p-6 rounded-lg max-w-md w-full\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"text-2xl font-bold text-center mb-4\",\n        children: \"Enter OTP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center text-gray-600 mb-4\",\n        children: \"Please enter the 6-digit code sent to your mobile number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit1,\n        className: \"mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center mb-4 space-x-2\",\n          children: otp.map((data, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            maxLength: 1,\n            value: data,\n            onChange: e => handleChange(e.target, index),\n            onFocus: e => e.target.select(),\n            className: \"w-12 h-12 text-center text-xl border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-red-500 text-center\",\n          children: \"Please enter all 6 digits\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600\",\n            children: \"Verify OTP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 5\n  }, this);\n};\n_s(Otp, \"pXyJg8594dJQNujVMZz2WmOTU8g=\", false, function () {\n  return [useNavigate];\n});\n_c = Otp;\nexport default Otp;\nvar _c;\n$RefreshReg$(_c, \"Otp\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useNavigate","axios","jsxDEV","_jsxDEV","Otp","_s","otp","setOtp","Array","fill","error","setError","success","setSuccess","navigate","handleChange","element","index","isNaN","value","map","d","idx","nextSibling","focus","handleSubmit1","e","preventDefault","otpValue","join","length","console","log","response","post","data","alert","localStorage","removeItem","window","location","reload","videoRef","getItem","navigator","mediaDevices","getUserMedia","video","then","stream","current","srcObject","catch","err","className","children","ref","autoPlay","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","maxLength","onChange","target","onFocus","select","_c","$RefreshReg$"],"sources":["C:/Users/adity/voting_app/public/my-app/src/components/Otp.js"],"sourcesContent":["// import React, { useState ,useRef,useEffect} from 'react';\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { TextField, Button, Box, Typography, Grid, Paper } from '@mui/material';\r\n// import './OtpPage.css';\r\n// import axios from 'axios';\r\n\r\n// const Otp = () => {\r\n//   const [otp, setOtp] = useState(new Array(6).fill(\"\"));\r\n//   const [error, setError] = useState(false);\r\n//   const [success, setSuccess] = useState(''); // State for success messages\r\n//   const navigate = useNavigate();\r\n//   const handleChange = (element, index) => {\r\n//     if (isNaN(element.value)) return; // Allow only numbers\r\n//     setOtp([...otp.map((d, idx) => (idx === index ? element.value : d))]);\r\n\r\n//     // Move to the next input field automatically\r\n//     if (element.nextSibling && element.value) {\r\n//       element.nextSibling.focus();\r\n//     }\r\n//   };\r\n\r\n//   const handleSubmit1 = async(e) => {\r\n//     e.preventDefault();\r\n//     const otpValue = otp.join(\"\");\r\n//     if (otpValue.length === 6) {\r\n//       setError(false);\r\n//       console.log(\"Entered OTP:\", otpValue);\r\n//       // Here you can add the API call to verify the OTP\r\n//       try {\r\n//         const response = await axios.post('https://api.example.com/verify-otp', {\r\n//           otpValue, // Send the OTP in the request body\r\n//         });\r\n  \r\n//         // Assuming a successful response\r\n//         if (response.data.success) {\r\n//           setSuccess('OTP verified successfully!');\r\n//           startRecording();\r\n//           navigate(\"/home\");\r\n//           setError(''); // Clear any previous errors\r\n//         } else {\r\n//           setError('Invalid OTP. Please try again.');\r\n//           setSuccess('');\r\n//         }\r\n//       } catch (error) {\r\n//         stopCapture();\r\n//         stopRecording();\r\n//         console.error('Error verifying OTP:', error);\r\n//         setError('An error occurred while verifying OTP. Please try again.');\r\n//         setSuccess('');\r\n//       }\r\n//     } else {\r\n//       setError(true);\r\n//     }\r\n//   };\r\n\r\n\r\n//   const [isRecording, setIsRecording] = useState(false);\r\n//   const [videoURL, setVideoURL] = useState(null);\r\n//   const mediaRecorderRef = useRef(null);\r\n//   const recordedChunks = useRef([]);\r\n\r\n//   const startRecording = async () => {\r\n//     try {\r\n//       // Capture the screen\r\n//       const stream = await navigator.mediaDevices.getDisplayMedia({\r\n//         video: { mediaSource: 'screen' },\r\n//       });\r\n\r\n//       // Initialize MediaRecorder\r\n//       mediaRecorderRef.current = new MediaRecorder(stream, {\r\n//         mimeType: 'video/webm',\r\n//       });\r\n\r\n//       // Collect the recorded chunks of data\r\n//       mediaRecorderRef.current.ondataavailable = (event) => {\r\n//         if (event.data.size > 0) {\r\n//           recordedChunks.current.push(event.data);\r\n//         }\r\n//       };\r\n\r\n//       // Handle the stop event\r\n//       mediaRecorderRef.current.onstop = () => {\r\n//         // Create a video URL from the recorded chunks\r\n//         const blob = new Blob(recordedChunks.current, { type: 'video/webm' });\r\n//         const videoURL = URL.createObjectURL(blob);\r\n//         setVideoURL(videoURL);\r\n//         recordedChunks.current = []; // Clear the recorded chunks\r\n//       };\r\n\r\n//       // Start the recording\r\n//       mediaRecorderRef.current.start();\r\n//       setIsRecording(true);\r\n//     } catch (err) {\r\n//       console.error('Error accessing display media', err);\r\n//     }\r\n//   };\r\n\r\n//   const stopRecording = () => {\r\n//     // Stop the recording\r\n//     mediaRecorderRef.current.stop();\r\n//     mediaRecorderRef.current = null; \r\n//     setIsRecording(false);\r\n//   };\r\n\r\n//   const containerRef = useRef(null);\r\n//   //fullscreen code\r\n//   useEffect(() => {\r\n//     // Request full-screen mode when the component mounts\r\n//     if (containerRef.current) {\r\n//       containerRef.current.requestFullscreen();\r\n//     }\r\n\r\n//     // Disable right-click context menu\r\n//     const handleContextMenu = (e) => {\r\n//       e.preventDefault();\r\n//     };\r\n\r\n//     // Disable certain key combinations\r\n//     const handleKeyDown = (e) => {\r\n//       // Disable F11, Ctrl+T, Ctrl+N, Ctrl+W, and Alt+F4\r\n//       if (\r\n//         e.key === 'F11' ||\r\n//         (e.ctrlKey && (e.key === 't' || e.key === 'n' || e.key === 'w')) ||\r\n//         (e.altKey && e.key === 'F4')\r\n//       ) {\r\n//         e.preventDefault();\r\n//       }\r\n//     };\r\n\r\n//     window.addEventListener('contextmenu', handleContextMenu);\r\n//     window.addEventListener('keydown', handleKeyDown);\r\n\r\n//     return () => {\r\n//       // Clean up the event listeners when the component unmounts\r\n//       window.removeEventListener('contextmenu', handleContextMenu);\r\n//       window.removeEventListener('keydown', handleKeyDown);\r\n//     };\r\n//   }, []);\r\n\r\n\r\n//   //cameralive\r\n//   const videoRef = useRef(null);\r\n//   const streamRef = useRef(null);\r\n//   useEffect(() => {\r\n//     navigator.mediaDevices.getUserMedia({ video: true })\r\n//       .then((stream) => {\r\n//         videoRef.current.srcObject = stream;\r\n//       })\r\n//       .catch((err) => {\r\n//         console.error(\"Error accessing the camera: \", err);\r\n//         alert(\"Could not access the camera. Please allow camera permissions.\");\r\n//       });\r\n//   }, []);\r\n\r\n//   const stopCapture = () => {\r\n//     if (streamRef.current) {\r\n//       // Stop all tracks in the media stream\r\n//       streamRef.current.getTracks().forEach((track) => track.stop());\r\n//       videoRef.current.srcObject = null; // Clear the video element's source\r\n//       streamRef.current = null; // Clear the stream reference\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n    \r\n//     <Grid container justifyContent=\"center\" alignItems=\"center\" style={{ minHeight: \"100vh\" }}>\r\n//         <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center', gap: '10px' ,marginRight:\"40px\"}}>\r\n//             <video ref={videoRef} width=\"320\" height=\"240\" autoPlay style={{ border: \"2px solid blue\" }}></video>\r\n//         </div>\r\n//       <Paper elevation={3} className=\"otp-paper\">\r\n//         <Typography variant=\"h4\" align=\"center\" gutterBottom>\r\n//           Enter OTP\r\n//         </Typography>\r\n//         <Typography variant=\"body1\" align=\"center\" color=\"textSecondary\">\r\n//           Please enter the 6-digit code sent to your mobile number\r\n//         </Typography>\r\n//         <form onSubmit={handleSubmit1} style={{ marginTop: \"20px\" }}>\r\n//           <Box display=\"flex\" justifyContent=\"center\" mb={2}>\r\n//             {otp.map((data, index) => (\r\n//               <TextField\r\n//                 key={index}\r\n//                 type=\"text\"\r\n//                 inputProps={{ maxLength: 1, style: { textAlign: 'center', fontSize: '24px' } }}\r\n//                 value={data}\r\n//                 onChange={(e) => handleChange(e.target, index)}\r\n//                 onFocus={(e) => e.target.select()}\r\n//                 className=\"otp-input\"\r\n//               />\r\n//             ))}\r\n//           </Box>\r\n//           {error && <Typography color=\"error\" align=\"center\">Please enter all 6 digits</Typography>}\r\n//           <Box textAlign=\"center\">\r\n//             <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"submit-btn\">\r\n//               Verify OTP\r\n//             </Button>\r\n//           </Box>\r\n//         </form>\r\n//       </Paper>\r\n//     </Grid>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Otp;\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from 'axios';\r\n\r\nconst Otp = () => {\r\n  const [otp, setOtp] = useState(new Array(6).fill(\"\"));\r\n  const [error, setError] = useState(false);\r\n  const [success, setSuccess] = useState(''); // State for success messages\r\n  const navigate = useNavigate();\r\n\r\n  const handleChange = (element, index) => {\r\n    if (isNaN(element.value)) return; // Allow only numbers\r\n    setOtp([...otp.map((d, idx) => (idx === index ? element.value : d))]);\r\n\r\n    // Move to the next input field automatically\r\n    if (element.nextSibling && element.value) {\r\n      element.nextSibling.focus();\r\n    }\r\n  };\r\n\r\n  const handleSubmit1 = async (e) => {\r\n    e.preventDefault();\r\n    const otpValue = otp.join(\"\");\r\n    if (otpValue.length === 6) {\r\n      setError(false);\r\n      console.log(\"Entered OTP:\", otpValue);\r\n\r\n      try {\r\n        const response = await axios.post('https://api.example.com/verify-otp', {\r\n          otpValue, // Send the OTP in the request body\r\n        });\r\n        if (response.data.success) {\r\n          setSuccess('OTP verified successfully!');\r\n          alert(success);\r\n          navigate(\"/camera\");\r\n          setError(''); // Clear any previous errors\r\n        } else {\r\n          setError('Invalid OTP. Please try again.');\r\n          setSuccess('');\r\n        }\r\n      } catch (error) {\r\n        \r\n        localStorage.removeItem('token');\r\n        window.location.reload();\r\n        navigate('/signup');\r\n        alert('An error occurred while verifying OTP. Please try with different credentials.');\r\n        console.error('Error verifying OTP:', error);\r\n        setError('An error occurred while verifying OTP. Please try again.');\r\n        setSuccess('');\r\n      }\r\n    } else {\r\n      setError(true);\r\n    }\r\n  };\r\n\r\n  const videoRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if(localStorage.getItem(\"token\")){\r\n      navigator.mediaDevices.getUserMedia({ video: true })\r\n      .then((stream) => {\r\n        videoRef.current.srcObject = stream;\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"Error accessing the camera: \", err);\r\n        alert(\"Could not access the camera. Please allow camera permissions.\");\r\n      });\r\n    }\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className=\"flex items-center justify-center h-full py-20\">\r\n      <div className=\"flex flex-wrap justify-center gap-2 md:gap-4 lg:gap-6 mr-12\">\r\n        <video\r\n          ref={videoRef}\r\n          className=\"w-80 h-60 border-2 border-green-500\"\r\n          autoPlay\r\n        ></video>\r\n      </div>\r\n\r\n      <div className=\"bg-white shadow-md p-6 rounded-lg max-w-md w-full\">\r\n        <h4 className=\"text-2xl font-bold text-center mb-4\">Enter OTP</h4>\r\n        <p className=\"text-center text-gray-600 mb-4\">\r\n          Please enter the 6-digit code sent to your mobile number\r\n        </p>\r\n        <form onSubmit={handleSubmit1} className=\"mt-5\">\r\n          <div className=\"flex justify-center mb-4 space-x-2\">\r\n            {otp.map((data, index) => (\r\n              <input\r\n                key={index}\r\n                type=\"text\"\r\n                maxLength={1}\r\n                value={data}\r\n                onChange={(e) => handleChange(e.target, index)}\r\n                onFocus={(e) => e.target.select()}\r\n                className=\"w-12 h-12 text-center text-xl border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              />\r\n            ))}\r\n          </div>\r\n          {error && <p className=\"text-red-500 text-center\">Please enter all 6 digits</p>}\r\n          <div className=\"text-center\">\r\n            <button type=\"submit\" className=\"bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600\">\r\n              Verify OTP\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Otp;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGV,QAAQ,CAAC,IAAIW,KAAK,CAAC,CAAC,CAAC,C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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}