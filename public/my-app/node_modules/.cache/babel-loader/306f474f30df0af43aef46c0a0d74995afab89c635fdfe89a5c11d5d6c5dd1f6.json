{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adity\\\\Desktop\\\\Project\\\\my-app\\\\src\\\\components\\\\Upload.js\",\n  _s = $RefreshSig$();\n/*import React, { useState } from 'react';\r\nimport jsQR from 'jsqr';\r\n\r\nfunction App() {\r\n  const [file, setFile] = useState(null);\r\n  const [result, setResult] = useState('');\r\n\r\n  const handleChange = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onload = (event) => {\r\n        const imageSrc = event.target.result;\r\n        console.log(imageSrc);\r\n        setFile(imageSrc);\r\n        //scanImage(imageSrc);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  /*const scanImage = (imageSrc) => {\r\n    const img = new Image();\r\n    img.src = imageSrc;\r\n    img.onload = () => {\r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      const ctx = canvas.getContext('2d');\r\n      ctx.drawImage(img, 0, 0, img.width, img.height);\r\n      const imageData = ctx.getImageData(0, 0, img.width, img.height);\r\n      const code = jsQR(imageData.data, img.width, img.height);\r\n      if (code) {\r\n        setResult(`QR Code Data: ${code.data}`);\r\n      } else {\r\n        setResult('No QR code found.');\r\n      }\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\" style={{marginTop:\"150px\"}}>\r\n      <h1>Upload and Scan Image</h1>\r\n      <input type=\"file\" onChange={handleChange} accept=\"image/*\" />\r\n      {file && <img src={file} alt=\"Preview\" style={{ maxWidth: '100%', maxHeight: '300px', marginTop: '20px' }} />}\r\n      <p>{result}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;*/\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [result, setResult] = useState(null);\n  const handleFileChange = e => {\n    setFile(e.target.files[0]);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append(\"file\", file);\n\n    // Send the image to the backend\n    const response = await axios.post(\"http://127.0.0.1:8000/predict/\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n\n    // Set the result from the API\n    setResult(response.data.prediction);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Plant Disease Classification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Prediction: \", JSON.stringify(result)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"4hEt5RgFMuja5UEnm5KQUGm0SBU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","file","setFile","result","setResult","handleFileChange","e","target","files","handleSubmit","preventDefault","formData","FormData","append","response","post","headers","data","prediction","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/Users/adity/Desktop/Project/my-app/src/components/Upload.js"],"sourcesContent":["/*import React, { useState } from 'react';\r\nimport jsQR from 'jsqr';\r\n\r\nfunction App() {\r\n  const [file, setFile] = useState(null);\r\n  const [result, setResult] = useState('');\r\n\r\n  const handleChange = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onload = (event) => {\r\n        const imageSrc = event.target.result;\r\n        console.log(imageSrc);\r\n        setFile(imageSrc);\r\n        //scanImage(imageSrc);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  /*const scanImage = (imageSrc) => {\r\n    const img = new Image();\r\n    img.src = imageSrc;\r\n    img.onload = () => {\r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      const ctx = canvas.getContext('2d');\r\n      ctx.drawImage(img, 0, 0, img.width, img.height);\r\n      const imageData = ctx.getImageData(0, 0, img.width, img.height);\r\n      const code = jsQR(imageData.data, img.width, img.height);\r\n      if (code) {\r\n        setResult(`QR Code Data: ${code.data}`);\r\n      } else {\r\n        setResult('No QR code found.');\r\n      }\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\" style={{marginTop:\"150px\"}}>\r\n      <h1>Upload and Scan Image</h1>\r\n      <input type=\"file\" onChange={handleChange} accept=\"image/*\" />\r\n      {file && <img src={file} alt=\"Preview\" style={{ maxWidth: '100%', maxHeight: '300px', marginTop: '20px' }} />}\r\n      <p>{result}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;*/\r\nimport React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction App() {\r\n    const [file, setFile] = useState(null);\r\n    const [result, setResult] = useState(null);\r\n\r\n    const handleFileChange = (e) => {\r\n        setFile(e.target.files[0]);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n\r\n        // Send the image to the backend\r\n        const response = await axios.post(\"http://127.0.0.1:8000/predict/\", formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\",\r\n            },\r\n        });\r\n\r\n        // Set the result from the API\r\n        setResult(response.data.prediction);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Plant Disease Classification</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <input type=\"file\" onChange={handleFileChange} />\r\n                <button type=\"submit\">Upload</button>\r\n            </form>\r\n            {result && <div>Prediction: {JSON.stringify(result)}</div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE1C,MAAMU,gBAAgB,GAAIC,CAAC,IAAK;IAC5BJ,OAAO,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAC9B,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOH,CAAC,IAAK;IAC9BA,CAAC,CAACI,cAAc,CAAC,CAAC;IAClB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEZ,IAAI,CAAC;;IAE7B;IACA,MAAMa,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAAC,gCAAgC,EAAEJ,QAAQ,EAAE;MAC1EK,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;;IAEF;IACAZ,SAAS,CAACU,QAAQ,CAACG,IAAI,CAACC,UAAU,CAAC;EACvC,CAAC;EAED,oBACIpB,OAAA;IAAAqB,QAAA,gBACIrB,OAAA;MAAAqB,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrCzB,OAAA;MAAM0B,QAAQ,EAAEf,YAAa;MAAAU,QAAA,gBACzBrB,OAAA;QAAO2B,IAAI,EAAC,MAAM;QAACC,QAAQ,EAAErB;MAAiB;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACjDzB,OAAA;QAAQ2B,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,EACNpB,MAAM,iBAAIL,OAAA;MAAAqB,QAAA,GAAK,cAAY,EAACQ,IAAI,CAACC,SAAS,CAACzB,MAAM,CAAC;IAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzD,CAAC;AAEd;AAACvB,EAAA,CAlCQD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AAoCZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}